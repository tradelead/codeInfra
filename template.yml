AWSTemplateFormatVersion: '2010-09-09'
Mappings:
  ECSRegionMap:
    ap-northeast-1:
      AMI: ami-00f839709b07ffb58
    ap-northeast-2:
      AMI: ami-0470f8828abe82a87
    ap-south-1:
      AMI: ami-0d143ad35f29ad632
    ap-southeast-1:
      AMI: ami-0c5b69a05af2f0e23
    ap-southeast-2:
      AMI: ami-011ce3fbe73731dfe
    ca-central-1:
      AMI: ami-039a05a64b90f63ee
    eu-central-1:
      AMI: ami-0ab1db011871746ef
    eu-west-1:
      AMI: ami-09cd8db92c6bf3a84
    eu-west-2:
      AMI: ami-016a20f0624bae8c5
    eu-west-3:
      AMI: ami-0b4b8274f0c0d3bac
    sa-east-1:
      AMI: aami-04e333c875fae9d77
    us-east-1:
      AMI: ami-0bc08634af113cccb
    us-east-2:
      AMI: ami-00cffcd24cb08edf1
    us-west-1:
      AMI: ami-05cc68a00d392447a
    us-west-2:
      AMI: ami-0054160a688deeb6a
  NatRegionMap:
    ap-northeast-1:
      AMI: ami-06cd52961ce9f0d85
    ap-northeast-2:
      AMI: ami-0a10b2721688ce9d2
    ap-south-1:
      AMI: ami-0912f71e06545ad88
    ap-southeast-1:
      AMI: ami-08569b978cc4dfa10
    ap-southeast-2:
      AMI: ami-09b42976632b27e9b
    ca-central-1:
      AMI: ami-0b18956f
    cn-north-1:
      AMI: ami-0a4eaf6c4454eda75
    eu-central-1:
      AMI: ami-0233214e13e500f77
    eu-west-1:
      AMI: ami-047bb4163c506cd98
    eu-west-2:
      AMI: ami-f976839e
    eu-west-3:
      AMI: ami-0ebc281c20e89ba4b
    sa-east-1:
      AMI: aami-07b14488da8ea02a0
    us-east-1:
      AMI: ami-0ff8a91507f77f867
    us-east-2:
      AMI: ami-0b59bfac6be064b78
    us-west-1:
      AMI: ami-a0cfeed8
    us-west-2:
      AMI: ami-0bdb828fd58c52235
Outputs:
  ALBWebListener:
    Export:
      Name: !Sub '${AWS::StackName}-ALB-Web-Listener'
    Value: !Ref 'HTTPSListener'
  ECSCluster:
    Export:
      Name: !Sub '${AWS::StackName}-ECS-Cluster'
    Value: !Ref 'AppServicesCluster'
  LoadBalancer:
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancer'
    Value: !Ref 'CoreLoadBalancer'
  LoadBalancerSG:
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancer-SG-ID'
    Value: !GetAtt 'LoadBalancerSecurityGroup.GroupId'
  MySQLAddress:
    Export:
      Name: !Sub '${AWS::StackName}-MySQL-Address'
    Value: !GetAtt 'RDSMySQL.Endpoint.Address'
  MySQLPort:
    Export:
      Name: !Sub '${AWS::StackName}-MySQL-Port'
    Value: !GetAtt 'RDSMySQL.Endpoint.Port'
  NATSecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}-NAT-SG-ID'
    Value: !GetAtt 'NatSecurityGroup.GroupId'
  NewFilledOrderTopic:
    Export:
      Name: !Sub '${AWS::StackName}-NewFilledOrderTopicArn'
    Value: !Ref 'NewFilledOrderTopic'
  NewSuccessfulDepositTopic:
    Export:
      Name: !Sub '${AWS::StackName}-NewSuccessfulDepositTopicArn'
    Value: !Ref 'NewSuccessfulDepositTopic'
  NewSuccessfulWithdrawalTopic:
    Export:
      Name: !Sub '${AWS::StackName}-NewSuccessfulWithdrawalTopicArn'
    Value: !Ref 'NewSuccessfulWithdrawalTopic'
  NewTraderExchangeTopic:
    Export:
      Name: !Sub '${AWS::StackName}-NewTraderExchangeTopicArn'
    Value: !Ref 'NewTraderExchangeTopic'
  RDSAccessSG:
    Export:
      Name: !Sub '${AWS::StackName}-RDS-Access-SG-ID'
    Value: !GetAtt 'RDSAccessSecurityGroup.GroupId'
  RedisAccessSG:
    Export:
      Name: !Sub '${AWS::StackName}-Redis-Access-SG-ID'
    Value: !GetAtt 'RedisAccessSecurityGroup.GroupId'
  RedisAddress:
    Export:
      Name: !Sub '${AWS::StackName}-Redis-Address'
    Value: !GetAtt 'Redis.RedisEndpoint.Address'
  RedisPort:
    Export:
      Name: !Sub '${AWS::StackName}-Redis-Port'
    Value: !GetAtt 'Redis.RedisEndpoint.Port'
  RemoveTraderExchangeTopic:
    Export:
      Name: !Sub '${AWS::StackName}-RemoveTraderExchangeTopicArn'
    Value: !Ref 'RemoveTraderExchangeTopic'
  Subnet:
    Export:
      Name: !Sub '${AWS::StackName}-SubnetID'
    Value: !Ref 'SubnetPrivate'
  VPC:
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'
    Value: !Ref 'VPC'
Parameters:
  CertificateArn:
    Type: String
  ECSInstClass:
    Type: String
  ECSInstMax:
    Type: Number
  ECSInstMin:
    Type: Number
  KeyPair:
    Type: String
  NATInstClass:
    Type: String
  RDSInstClass:
    Type: String
  RDSMasterPass:
    Type: String
  RDSMasterUser:
    Type: String
  RDSStorage:
    Type: String
  RedisInstClass:
    Type: String
  RedisInstNum:
    Type: Number
Resources:
  AppServicesCluster:
    Type: AWS::ECS::Cluster
  CoreLoadBalancer:
    Properties:
      SecurityGroups:
        - !GetAtt 'LoadBalancerSecurityGroup.GroupId'
      Subnets:
        - !Ref 'SubnetPrivate'
        - !Ref 'SubnetPrivateB'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ECSAutoScalingGroup:
    DependsOn:
      - SubnetPrivate
      - ECSSecurityGroup
    Properties:
      LaunchConfigurationName: !Ref 'ECSLaunchConfiguration'
      MaxSize: !Ref 'ECSInstMax'
      MinSize: !Ref 'ECSInstMin'
      Tags:
        - Key: purpose
          PropagateAtLaunch: 'true'
          Value: ecsCluster
      VPCZoneIdentifier:
        - !Ref 'SubnetPrivate'
    Type: AWS::AutoScaling::AutoScalingGroup
  ECSInstProfile:
    Properties:
      Roles:
        - !Ref 'ECSRole'
    Type: AWS::IAM::InstanceProfile
  ECSLaunchConfiguration:
    Properties:
      AssociatePublicIpAddress: 'true'
      EbsOptimized: 'false'
      IamInstanceProfile: !Ref 'ECSInstProfile'
      ImageId: !FindInMap
        - ECSRegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref 'ECSInstClass'
      SecurityGroups:
        - !GetAtt 'ECSSecurityGroup.GroupId'
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\n        yum update -y && yum install -y yum-cron && chkconfig\
            \ yum-cron on\n        sudo bash -c \"echo ECS_CLUSTER=${ECSCluster} >>\
            \ /etc/ecs/ecs.config\"\n        "
          - ECSCluster: !Ref 'AppServicesCluster'
    Type: AWS::AutoScaling::LaunchConfiguration
  ECSRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
    Type: AWS::IAM::Role
  ECSSecurityGroup:
    DependsOn: VPC
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  GatewayToInternet:
    DependsOn:
      - VPC
      - InternetGateway
    Properties:
      InternetGatewayId: !Ref 'InternetGateway'
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::VPCGatewayAttachment
  HTTPListener:
    Properties:
      DefaultActions:
        - RedirectConfig:
            Port: '443'
            Protocol: HTTPS
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'CoreLoadBalancer'
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  HTTPSListener:
    Properties:
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
      DefaultActions:
        - FixedResponseConfig:
            ContentType: text/html
            MessageBody: Not Found
            StatusCode: '404'
          Type: fixed-response
      LoadBalancerArn: !Ref 'CoreLoadBalancer'
      Port: '443'
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  LoadBalancerSecurityGroup:
    Properties:
      GroupDescription: Load Balancer SG
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  NATAutoScalingGroup:
    DependsOn:
      - SubnetPublic
      - NatSecurityGroup
    Properties:
      LaunchConfigurationName: !Ref 'NATLaunchConfiguration'
      MaxSize: 1
      MinSize: 1
      Tags:
        - Key: purpose
          PropagateAtLaunch: 'true'
          Value: nat
      VPCZoneIdentifier:
        - !Ref 'SubnetPublic'
    Type: AWS::AutoScaling::AutoScalingGroup
  NATInstProfile:
    Properties:
      Roles:
        - !Ref 'NATRole'
    Type: AWS::IAM::InstanceProfile
  NATLaunchConfiguration:
    Properties:
      AssociatePublicIpAddress: 'true'
      EbsOptimized: 'false'
      IamInstanceProfile: !Ref 'NATInstProfile'
      ImageId: !FindInMap
        - NatRegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref 'NATInstClass'
      KeyName: !Ref 'KeyPair'
      SecurityGroups:
        - !GetAtt 'NatSecurityGroup.GroupId'
        - !GetAtt 'RDSAccessSecurityGroup.GroupId'
      UserData: !Base64
        Fn::Sub:
          - "#!/bin/bash\n        yum update -y && yum install -y yum-cron && chkconfig\
            \ yum-cron on\n        echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf\n\
            \        sudo sysctl -p\n        sudo iptables -t nat -A POSTROUTING -o\
            \ eth0 -s ${VPCCidr} -j MASQUERADE\n        sudo /etc/init.d/iptables\
            \ save\n        export AWS_DEFAULT_REGION='${AWS::Region}'\n        INSTANCEID=$(curl\
            \ -s http://169.254.169.254/latest/meta-data/instance-id)\n        /usr/bin/aws\
            \ ec2 modify-instance-attribute --instance-id $INSTANCEID --no-source-dest-check\n\
            \        aws --region ${AWS::Region} ec2 replace-route --route-table-id\
            \ ${RouteTablePrivate} --destination-cidr-block '0.0.0.0/0' --instance-id\
            \ $INSTANCEID || aws --region ${AWS::Region} ec2 create-route --route-table-id\
            \ ${RouteTablePrivate} --destination-cidr-block '0.0.0.0/0' --instance-id\
            \ $INSTANCEID\n        "
          - RouteTablePrivate: !Ref 'PrivateRouteTable'
            VPCCidr: 172.31.0.0/16
    Type: AWS::AutoScaling::LaunchConfiguration
  NATRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:ModifyInstanceAttribute
                Effect: Allow
                Resource: '*'
              - Action:
                  - ec2:CreateRoute
                  - ec2:ReplaceRoute
                Effect: Allow
                Resource: !Sub
                  - arn:aws:ec2:*:*:route-table/${RouteTable}
                  - RouteTable: !Ref 'PrivateRouteTable'
            Version: '2012-10-17'
          PolicyName: ec2
    Type: AWS::IAM::Role
  NatSecurityGroup:
    DependsOn: VPC
    Properties:
      GroupDescription: NAT Security Group
      SecurityGroupIngress:
        - CidrIp: 172.31.0.0/16
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 172.31.0.0/16
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  NewFilledOrderTopic:
    Type: AWS::SNS::Topic
  NewSuccessfulDepositTopic:
    Type: AWS::SNS::Topic
  NewSuccessfulWithdrawalTopic:
    Type: AWS::SNS::Topic
  NewTraderExchangeTopic:
    Type: AWS::SNS::Topic
  PrivateRouteTable:
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateRouteTableB:
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PrivateSubnetRouteTableAssociation:
    DependsOn:
      - SubnetPrivate
      - PrivateRouteTable
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      SubnetId: !Ref 'SubnetPrivate'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PrivateSubnetRouteTableAssociationB:
    DependsOn:
      - SubnetPrivateB
      - PrivateRouteTableB
    Properties:
      RouteTableId: !Ref 'PrivateRouteTableB'
      SubnetId: !Ref 'SubnetPrivateB'
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicRoute:
    DependsOn:
      - PublicRouteTable
      - InternetGateway
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      RouteTableId: !Ref 'PublicRouteTable'
    Type: AWS::EC2::Route
  PublicRouteTable:
    DependsOn:
      - VPC
    Properties:
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::RouteTable
  PublicSubnetRouteTableAssociation:
    DependsOn:
      - SubnetPublic
      - PublicRouteTable
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      SubnetId: !Ref 'SubnetPublic'
    Type: AWS::EC2::SubnetRouteTableAssociation
  RDSAccessSecurityGroup:
    Properties:
      GroupDescription: RDS Access SG
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  RDSMySQL:
    Properties:
      AllocatedStorage: !Ref 'RDSStorage'
      AutoMinorVersionUpgrade: 'true'
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - a
      DBInstanceClass: !Ref 'RDSInstClass'
      DBSubnetGroupName: !Ref 'RDSMySQLSubnetGroup'
      Engine: mysql
      EngineVersion: '8.0'
      MasterUserPassword: !Ref 'RDSMasterPass'
      MasterUsername: !Ref 'RDSMasterUser'
      PubliclyAccessible: 'false'
      VPCSecurityGroups:
        - !GetAtt 'RDSMySQLSecurityGroup.GroupId'
    Type: AWS::RDS::DBInstance
  RDSMySQLSecurityGroup:
    Properties:
      GroupDescription: MySQL Security Group
      SecurityGroupIngress:
        - FromPort: 3306
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt 'RDSAccessSecurityGroup.GroupId'
          ToPort: 3306
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  RDSMySQLSubnetGroup:
    Properties:
      DBSubnetGroupDescription: MySQL Subnet Group
      SubnetIds:
        - !Ref 'SubnetPrivate'
        - !Ref 'SubnetPrivateB'
    Type: AWS::RDS::DBSubnetGroup
  Redis:
    Properties:
      CacheNodeType: !Ref 'RedisInstClass'
      CacheSubnetGroupName: !Ref 'RedisSubnetGroup'
      Engine: redis
      EngineVersion: 5.0.3
      NumCacheNodes: !Ref 'RedisInstNum'
      PreferredAvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - a
      VpcSecurityGroupIds:
        - !GetAtt 'RedisSecurityGroup.GroupId'
    Type: AWS::ElastiCache::CacheCluster
  RedisAccessSecurityGroup:
    Properties:
      GroupDescription: Redis Access SG
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  RedisSecurityGroup:
    Properties:
      GroupDescription: Redis SG
      SecurityGroupIngress:
        - FromPort: 6379
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt 'RedisAccessSecurityGroup.GroupId'
          ToPort: 6379
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::SecurityGroup
  RedisSubnetGroup:
    Properties:
      Description: Redis Subnet Group
      SubnetIds:
        - !Ref 'SubnetPrivate'
    Type: AWS::ElastiCache::SubnetGroup
  RemoveTraderExchangeTopic:
    Type: AWS::SNS::Topic
  SubnetPrivate:
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - a
      CidrBlock: 172.31.16.0/20
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  SubnetPrivateB:
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - b
      CidrBlock: 172.31.32.0/20
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  SubnetPublic:
    Properties:
      AvailabilityZone: !Join
        - ''
        - - !Ref 'AWS::Region'
          - a
      CidrBlock: 172.31.0.0/20
      VpcId: !Ref 'VPC'
    Type: AWS::EC2::Subnet
  VPC:
    Properties:
      CidrBlock: 172.31.0.0/16
    Type: AWS::EC2::VPC
